// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Roletype is the 'roletype' enum type from schema 'public'.
type Roletype uint16

const (
	// RoletypeSuperadmin is the 'SUPERADMIN' Roletype.
	RoletypeSuperadmin = Roletype(1)

	// RoletypeAdmin is the 'ADMIN' Roletype.
	RoletypeAdmin = Roletype(2)

	// RoletypeUser is the 'USER' Roletype.
	RoletypeUser = Roletype(3)
)

// String returns the string value of the Roletype.
func (r Roletype) String() string {
	var enumVal string

	switch r {
	case RoletypeSuperadmin:
		enumVal = "SUPERADMIN"

	case RoletypeAdmin:
		enumVal = "ADMIN"

	case RoletypeUser:
		enumVal = "USER"
	}

	return enumVal
}

// MarshalText marshals Roletype into text.
func (r Roletype) MarshalText() ([]byte, error) {
	return []byte(r.String()), nil
}

// UnmarshalText unmarshals Roletype from text.
func (r *Roletype) UnmarshalText(text []byte) error {
	switch string(text) {
	case "SUPERADMIN":
		*r = RoletypeSuperadmin

	case "ADMIN":
		*r = RoletypeAdmin

	case "USER":
		*r = RoletypeUser

	default:
		return errors.New("invalid Roletype")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Roletype.
func (r Roletype) Value() (driver.Value, error) {
	return r.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Roletype.
func (r *Roletype) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Roletype")
	}

	return r.UnmarshalText(buf)
}
