// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

// AccessControl represents a row from 'public.access_control'.
type AccessControl struct {
	ID        int    `json:"id"`         // id
	RouteName string `json:"route_name"` // route_name
	RoutePath string `json:"route_path"` // route_path

	_exists, _deleted bool
}

type AccessControlService interface {
	DoesAccessControlExists(ac *AccessControl) (bool, error)
	InsertAccessControl(ac *AccessControl) error
	UpdateAccessControl(ac *AccessControl) error
	UpsertAccessControl(ac *AccessControl) error
	DeleteAccessControl(ac *AccessControl) error
	GetAllAccessControls() ([]*AccessControl, error)
	GetChunkedAccessControls(limit int, offset int) ([]*AccessControl, error)
}

type AccessControlServiceImpl struct {
	DB XODB
}

// Exists determines if the AccessControl exists in the database.
func (serviceImpl *AccessControlServiceImpl) DoesAccessControlExists(ac *AccessControl) (bool, error) {
	panic("not yet implemented")
}

// Insert inserts the AccessControl to the database.
func (serviceImpl *AccessControlServiceImpl) InsertAccessControl(ac *AccessControl) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.access_control (` +
		`route_name, route_path` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ac.RouteName, ac.RoutePath)
	err = serviceImpl.DB.QueryRow(sqlstr, ac.RouteName, ac.RoutePath).Scan(&ac.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the AccessControl in the database.
func (serviceImpl *AccessControlServiceImpl) UpdateAccessControl(ac *AccessControl) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.access_control SET (` +
		`route_name, route_path` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, ac.RouteName, ac.RoutePath, ac.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, ac.RouteName, ac.RoutePath, ac.ID)
	return err
}

// Save saves the AccessControl to the database.
/*
	func (ac *AccessControl) Save(db XODB) error {
		if ac.Exists() {
			return ac.Update(db)
		}

		return ac.Insert(db)
	}
*/

// Upsert performs an upsert for AccessControl.
//
// NOTE: PostgreSQL 9.5+ only
func (serviceImpl *AccessControlServiceImpl) UpsertAccessControl(ac *AccessControl) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.access_control (` +
		`id, route_name, route_path` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, route_name, route_path` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.route_name, EXCLUDED.route_path` +
		`)`

	// run query
	XOLog(sqlstr, ac.ID, ac.RouteName, ac.RoutePath)
	_, err = serviceImpl.DB.Exec(sqlstr, ac.ID, ac.RouteName, ac.RoutePath)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the AccessControl from the database.
func (serviceImpl *AccessControlServiceImpl) DeleteAccessControl(ac *AccessControl) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.access_control WHERE id = $1`

	// run query
	XOLog(sqlstr, ac.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, ac.ID)
	if err != nil {
		return err
	}

	return nil
}

// GetAllAccessControls returns all rows from 'public.access_control',
// ordered by "created_at" in descending order.
func (serviceImpl *AccessControlServiceImpl) GetAllAccessControls() ([]*AccessControl, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.access_control`

	q, err := serviceImpl.DB.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*AccessControl
	for q.Next() {
		ac := AccessControl{}

		// scan
		err = q.Scan(&ac.ID, &ac.RouteName, &ac.RoutePath)
		if err != nil {
			return nil, err
		}

		res = append(res, &ac)
	}

	return res, nil
}

// GetChunkedAccessControls returns pagingated rows from 'public.access_control',
// ordered by "created_at" in descending order.
func (serviceImpl *AccessControlServiceImpl) GetChunkedAccessControls(limit int, offset int) ([]*AccessControl, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.access_control LIMIT $1 OFFSET $2`

	q, err := serviceImpl.DB.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*AccessControl
	for q.Next() {
		ac := AccessControl{}

		// scan
		err = q.Scan(&ac.ID, &ac.RouteName, &ac.RoutePath)
		if err != nil {
			return nil, err
		}

		res = append(res, &ac)
	}

	return res, nil
}

// AccessControlByID retrieves a row from 'public.access_control' as a AccessControl.
//
// Generated from index 'access_control_pkey'.
func AccessControlByID(db XODB, id int) (*AccessControl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, route_name, route_path ` +
		`FROM public.access_control ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ac := AccessControl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ac.ID, &ac.RouteName, &ac.RoutePath)
	if err != nil {
		return nil, err
	}

	return &ac, nil
}

// AccessControlByRouteName retrieves a row from 'public.access_control' as a AccessControl.
//
// Generated from index 'access_control_route_name_key'.
func AccessControlByRouteName(db XODB, routeName string) (*AccessControl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, route_name, route_path ` +
		`FROM public.access_control ` +
		`WHERE route_name = $1`

	// run query
	XOLog(sqlstr, routeName)
	ac := AccessControl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, routeName).Scan(&ac.ID, &ac.RouteName, &ac.RoutePath)
	if err != nil {
		return nil, err
	}

	return &ac, nil
}

// AccessControlByRoutePath retrieves a row from 'public.access_control' as a AccessControl.
//
// Generated from index 'access_control_route_path_key'.
func AccessControlByRoutePath(db XODB, routePath string) (*AccessControl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, route_name, route_path ` +
		`FROM public.access_control ` +
		`WHERE route_path = $1`

	// run query
	XOLog(sqlstr, routePath)
	ac := AccessControl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, routePath).Scan(&ac.ID, &ac.RouteName, &ac.RoutePath)
	if err != nil {
		return nil, err
	}

	return &ac, nil
}
