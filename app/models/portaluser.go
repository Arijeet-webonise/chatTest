// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"time"
)

// PortalUser represents a row from 'public.portal_user'.
type PortalUser struct {
	ID         int            `json:"id"`          // id
	FirstName  sql.NullString `json:"first_name"`  // first_name
	LastName   sql.NullString `json:"last_name"`   // last_name
	EmailID    string         `json:"email_id"`    // email_id
	Password   string         `json:"password"`    // password
	Role       Roletype       `json:"role"`        // role
	ModifiedAt time.Time      `json:"modified_at"` // modified_at
	CreatedAt  time.Time      `json:"created_at"`  // created_at

	_exists, _deleted bool
}

type PortalUserService interface {
	DoesPortalUserExists(pu *PortalUser) (bool, error)
	InsertPortalUser(pu *PortalUser) error
	UpdatePortalUser(pu *PortalUser) error
	UpsertPortalUser(pu *PortalUser) error
	DeletePortalUser(pu *PortalUser) error
	GetAllPortalUsers() ([]*PortalUser, error)
	GetChunkedPortalUsers(limit int, offset int) ([]*PortalUser, error)
}

type PortalUserServiceImpl struct {
	DB XODB
}

// Exists determines if the PortalUser exists in the database.
func (serviceImpl *PortalUserServiceImpl) DoesPortalUserExists(pu *PortalUser) (bool, error) {
	panic("not yet implemented")
}

// Insert inserts the PortalUser to the database.
func (serviceImpl *PortalUserServiceImpl) InsertPortalUser(pu *PortalUser) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.portal_user (` +
		`first_name, last_name, email_id, password, role, modified_at, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, pu.FirstName, pu.LastName, pu.EmailID, pu.Password, pu.Role, pu.ModifiedAt, pu.CreatedAt)
	err = serviceImpl.DB.QueryRow(sqlstr, pu.FirstName, pu.LastName, pu.EmailID, pu.Password, pu.Role, pu.ModifiedAt, pu.CreatedAt).Scan(&pu.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the PortalUser in the database.
func (serviceImpl *PortalUserServiceImpl) UpdatePortalUser(pu *PortalUser) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.portal_user SET (` +
		`first_name, last_name, email_id, password, role, modified_at, created_at` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE id = $8`

	// run query
	XOLog(sqlstr, pu.FirstName, pu.LastName, pu.EmailID, pu.Password, pu.Role, pu.ModifiedAt, pu.CreatedAt, pu.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, pu.FirstName, pu.LastName, pu.EmailID, pu.Password, pu.Role, pu.ModifiedAt, pu.CreatedAt, pu.ID)
	return err
}

// Save saves the PortalUser to the database.
/*
	func (pu *PortalUser) Save(db XODB) error {
		if pu.Exists() {
			return pu.Update(db)
		}

		return pu.Insert(db)
	}
*/

// Upsert performs an upsert for PortalUser.
//
// NOTE: PostgreSQL 9.5+ only
func (serviceImpl *PortalUserServiceImpl) UpsertPortalUser(pu *PortalUser) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.portal_user (` +
		`id, first_name, last_name, email_id, password, role, modified_at, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, first_name, last_name, email_id, password, role, modified_at, created_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.first_name, EXCLUDED.last_name, EXCLUDED.email_id, EXCLUDED.password, EXCLUDED.role, EXCLUDED.modified_at, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, pu.ID, pu.FirstName, pu.LastName, pu.EmailID, pu.Password, pu.Role, pu.ModifiedAt, pu.CreatedAt)
	_, err = serviceImpl.DB.Exec(sqlstr, pu.ID, pu.FirstName, pu.LastName, pu.EmailID, pu.Password, pu.Role, pu.ModifiedAt, pu.CreatedAt)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the PortalUser from the database.
func (serviceImpl *PortalUserServiceImpl) DeletePortalUser(pu *PortalUser) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.portal_user WHERE id = $1`

	// run query
	XOLog(sqlstr, pu.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, pu.ID)
	if err != nil {
		return err
	}

	return nil
}

// GetAllPortalUsers returns all rows from 'public.portal_user',
// ordered by "created_at" in descending order.
func (serviceImpl *PortalUserServiceImpl) GetAllPortalUsers() ([]*PortalUser, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.portal_user`

	q, err := serviceImpl.DB.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*PortalUser
	for q.Next() {
		pu := PortalUser{}

		// scan
		err = q.Scan(&pu.ID, &pu.FirstName, &pu.LastName, &pu.EmailID, &pu.Password, &pu.Role, &pu.ModifiedAt, &pu.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &pu)
	}

	return res, nil
}

// GetChunkedPortalUsers returns pagingated rows from 'public.portal_user',
// ordered by "created_at" in descending order.
func (serviceImpl *PortalUserServiceImpl) GetChunkedPortalUsers(limit int, offset int) ([]*PortalUser, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.portal_user LIMIT $1 OFFSET $2`

	q, err := serviceImpl.DB.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*PortalUser
	for q.Next() {
		pu := PortalUser{}

		// scan
		err = q.Scan(&pu.ID, &pu.FirstName, &pu.LastName, &pu.EmailID, &pu.Password, &pu.Role, &pu.ModifiedAt, &pu.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &pu)
	}

	return res, nil
}

// PortalUserByID retrieves a row from 'public.portal_user' as a PortalUser.
//
// Generated from index 'portal_user_pkey'.
func PortalUserByID(db XODB, id int) (*PortalUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email_id, password, role, modified_at, created_at ` +
		`FROM public.portal_user ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	pu := PortalUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pu.ID, &pu.FirstName, &pu.LastName, &pu.EmailID, &pu.Password, &pu.Role, &pu.ModifiedAt, &pu.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &pu, nil
}
