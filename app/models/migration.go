// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

// Migration represents a row from 'public.migrations'.
type Migration struct {
	ID        string      `json:"id"`         // id
	AppliedAt pq.NullTime `json:"applied_at"` // applied_at

	_exists, _deleted bool
}

type MigrationService interface {
	DoesMigrationExists(m *Migration) (bool, error)
	InsertMigration(m *Migration) error
	UpdateMigration(m *Migration) error
	UpsertMigration(m *Migration) error
	DeleteMigration(m *Migration) error
	GetAllMigrations() ([]*Migration, error)
	GetChunkedMigrations(limit int, offset int) ([]*Migration, error)
}

type MigrationServiceImpl struct {
	DB XODB
}

// Exists determines if the Migration exists in the database.
func (serviceImpl *MigrationServiceImpl) DoesMigrationExists(m *Migration) (bool, error) {
	panic("not yet implemented")
}

// Insert inserts the Migration to the database.
func (serviceImpl *MigrationServiceImpl) InsertMigration(m *Migration) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.migrations (` +
		`id, applied_at` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, m.ID, m.AppliedAt)
	err = serviceImpl.DB.QueryRow(sqlstr, m.ID, m.AppliedAt).Scan(&m.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Migration in the database.
func (serviceImpl *MigrationServiceImpl) UpdateMigration(m *Migration) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.migrations SET (` +
		`applied_at` +
		`) = ( ` +
		`$1` +
		`) WHERE id = $2`

	// run query
	XOLog(sqlstr, m.AppliedAt, m.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, m.AppliedAt, m.ID)
	return err
}

// Save saves the Migration to the database.
/*
	func (m *Migration) Save(db XODB) error {
		if m.Exists() {
			return m.Update(db)
		}

		return m.Insert(db)
	}
*/

// Upsert performs an upsert for Migration.
//
// NOTE: PostgreSQL 9.5+ only
func (serviceImpl *MigrationServiceImpl) UpsertMigration(m *Migration) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.migrations (` +
		`id, applied_at` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, applied_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.applied_at` +
		`)`

	// run query
	XOLog(sqlstr, m.ID, m.AppliedAt)
	_, err = serviceImpl.DB.Exec(sqlstr, m.ID, m.AppliedAt)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the Migration from the database.
func (serviceImpl *MigrationServiceImpl) DeleteMigration(m *Migration) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.migrations WHERE id = $1`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	return nil
}

// GetAllMigrations returns all rows from 'public.migrations',
// ordered by "created_at" in descending order.
func (serviceImpl *MigrationServiceImpl) GetAllMigrations() ([]*Migration, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.migrations`

	q, err := serviceImpl.DB.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Migration
	for q.Next() {
		m := Migration{}

		// scan
		err = q.Scan(&m.ID, &m.AppliedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}

// GetChunkedMigrations returns pagingated rows from 'public.migrations',
// ordered by "created_at" in descending order.
func (serviceImpl *MigrationServiceImpl) GetChunkedMigrations(limit int, offset int) ([]*Migration, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.migrations LIMIT $1 OFFSET $2`

	q, err := serviceImpl.DB.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Migration
	for q.Next() {
		m := Migration{}

		// scan
		err = q.Scan(&m.ID, &m.AppliedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}

// MigrationByID retrieves a row from 'public.migrations' as a Migration.
//
// Generated from index 'migrations_pkey'.
func MigrationByID(db XODB, id string) (*Migration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, applied_at ` +
		`FROM public.migrations ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	m := Migration{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.AppliedAt)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
